### git

Git是分布式的版本库。


#### merge和rebase
分支合并不是简单地把分支指针右移，而是对三方合并后的结果重新做一个新的快照，并自动创建一个指向它的提交对象。这个提交对象。这个提交对象比较特殊，它有两个祖先。在分支合并的时候，可能会导致冲突的发生，需要人工解决冲突才能够重新提交代码。

分支变基指的是回到两个分支最近的共同祖先，根据当前分支后续的历次提交对象，生成一系列的文件补丁，然后在基底分支的基础之上，逐个应用之前准备好的补丁文件，最后会生成一个新的合并提交对象。

#### GitFlow

GitFlow并非什么技术，而是一种代码开发合并管理流程的思维模式或者是管理方法。大家一起开发的一种软约定。

Master 分支： 稳定版本代码分支，用作发布环境，上面的每次提交都是可以发布的。
Feture 分支： 功能分支，用于开发功能（需求），用于开发环境
Developer 分支: 开发分支， 一旦Feture分支内功能开发完成就将Feture中的代码合并到Developer分支中，合并完成后，删除该功能分支。这个分支对应的是集成测试环境。
Release 分支：预发分支，做发布前的准备工作，对应的是预发环境。这个分支可以确保们开发继续向前，不会因为要发布不而被停滞住。一旦Release分支达到了可发布的状态，我们需要把Release分支同时向Master，Developer分支上合并，保持代码的一致性，然后把Release分支删除。
Hotfix 分支： 线上bug修缮用的分支，每次修改线上代码的bug时都要用hotfix来维护，完成后向Developer和Master同时合并。完成后删除分支。
以上就是GitFlow中所有角色分支，从中我们可以看到以下几点：

Master和Developer需要我们长期维护，也是我们开发的主干线。
其中relesase和hotfix两个分支的操作会很零碎，操作起来会比较麻烦，在这个过程中很容易产生失误，导致代码不一致。所以我们需要一个号的工具或者脚本来完成此步骤。
这个套流程虽然麻烦，但是他可以应用到几乎所有的开发流程中：瀑布型，敏捷性（waterfall，agile）

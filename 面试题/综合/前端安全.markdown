### 前端安全

* XSS

XSS 攻击指的是跨站脚本攻击，是一种代码注入攻击。攻击者通过在网站注入恶意脚本，使之在用户的浏览器上运行，从而盗取用户的信息如 cookie 等。

XSS最简单理解是: 不可信的内容被浏览器渲染执行了

XSS 的本质是因为网站没有对恶意代码进行过滤，与正常的代码混合在一起了，浏览器没有办法分辨哪些脚本是可信的，从而导致了恶意代码的执行。

#### 反射型
一.反射型 XSS漏洞
(1)反射型 xss 又称为非持久型 xss ，这种攻击方式往往具有一次性。
(2)攻击方式：攻击者通过电子邮件或者聊天工具等将包含 XSs 代码的恶意链接发送给目标用户。放目标用户访问该链接时，服务器就收目标的请求并进行处理，然后把带有 xss代码的数据发送给目标用户的浏览器，浏览器会解析这段带有 xss 代码的恶意脚本，就会触发 xss 漏洞。

1.测试的payload：<script>alert(1)</script>
 注：要注意alert()括号里面的写法，如字母xss，要加引号，数学不用
2.执行流程
 (1)在输入点输入内容，构造恶意代码，输入点是以 GET 方式提交的
 (2)后端接受提交的数据，并没有对输入进行过滤
 (3)然后将其呈现给前端，浏览器执行恶意代码

反射型 XSS 的数据流向是：浏览器 -> 后端 -> 浏览器。

#### 存储型
(1)存储型 xss 又称为持久性 xss ，攻击脚本将被永久的存放在目标服务器的数据库或文件中，既有很高的隐蔽性。
(2)攻击方式：这种攻击手法多见于论坛、博客和留言板；攻击者在发帖的过程中，将恶意脚本和正常的信息一起注入帖子的内容中。帖子被服务器存储下来，恶意脚本也就会被存放在服务器的后端数据库中，当其他的用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中解析并执行。

1.测试的 payload :<script>alert (document.cookie)</script>

2.存储型 xss 的执行流程
 (1)在留言板处输入内容，构造恶意代码
 (2)将输入的内容提交给后端代码执行，后端对输入过滤不严谨，然后执行插入的数据操作
 (3)此时，我们的恶意代码已经保存在数据库。不管何时何地何人查看这条留言，都会执行恶意代码，除非数据库中删除这条恶意代码(后面不管输入什么，结果都是一样的)

浏览器 -> 后端 -> 数据库 -> 后端 -> 浏览器。

#### DOM 型
(1)DOM 型 xss 执行场景跟之前两个不同，他是基于文档对象模型的漏洞，它可以动态的构造 DOM节点。所以说，该漏洞是不经过后端代码的，直接构造恶意代码，即可在前端展示
(2)攻击方式：用户请求一个专门设计的 URL，它是由攻击者提交，而且其中包含 xss 代码。服务器不会以任何的形式包含攻击者的脚本。当用户的浏览器处理这个响应时， DOM型对象就会处理 xss 代码

DOM-XSS 的数据流向是：URL-->浏览器 

办法：

（1）对于数据获取渲染和字符串拼接的时候应该对可能出现的恶意代码情况进行判断
  * 在使用 .innerHTML、.outerHTML、document.write()时要特别小心，不要把不可信的数据作为 HTML插到页面上，而应尽量使用.textContent、.setAttribute() 等。
  * DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover等， 标签的href属性，JavaScript 的eval()、setTimeout()、setInterval()等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易 产生安全隐患，请务必避免。

（2）对一些敏感信息进行保护，比如 cookie 使用 http-only ，使得脚本无法获取。也可以使用验证码，避免脚本伪装成用户执行一些操作。

* CSRF

CSRF 攻击指的是跨站请求伪造攻击，攻击者诱导用户进入一个第三方网站，然后该网站向被攻击网站发送跨站请求。如果用户在被攻击网站中保存了登录状态，那么攻击者就可以利用这个登录状态，绕过后台的用户验证，冒充用户向服务器执行一些操作。

csrf利用的是同源政策允许跨域表单提交，以及允许跨域请求资源完成的攻击。

办法：

* 禁止get请求操作数据库，因为有部分html标签发起的get请求，是可以携带cookie

* 同源检测的方法
即直接禁止外域（或者不受信任的域名）对我们发起请求。只针对特定白名单域名放开，不要滥用CROS

* Samesite Cookie，为了从源头上解决这个问题，Google起草了一份草案来改进HTTP协议，那就是为Set-Cookie响应头新增Samesite属性，它用来标明这个 Cookie是个“同站 Cookie”，同站Cookie只能作为第一方Cookie，不能作为第三方Cookie。

* 使用 CSRF Token 来进行验证
提交时要求附加本域才能获取的信息
服务器向用户返回一个随机数 Token ，当网站再次发起请求时，在请求参数中加入服务器端返回的 token ，然后服务器对这个 token 进行验证。这种方法解决了使用 cookie 单一验证方式时，可能会被冒用的问题，但是这种方法存在一个缺点就是，我们需要给网站中的所有请求都添加上这个 token，操作比较繁琐。还有一个问题是一般不会只有一台网站服务器，如果我们的请求经过负载平衡转移到了其他的服务器，但是这个服务器的 session 中没有保留这个 token 的话，就没有办法验证了。这种情况我们可以通过改变 token 的构建方式来解决。
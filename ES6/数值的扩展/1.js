/**
 * ES6提供二进制和八进制数值新写法，分别用前缀0b和0o表示
 */
0b11 === 3 // true
0o11 === 9 // true


/**
 * ES6在Number对象上提供了以下函数
 * Number.isNaN: 是否为NaN
 * Number.isInteger: 数值是否为整数
 */

/**
 * js精度问题
 */
// JavaScript是没有区分整数和浮点数的，在它内部，所有的数值都是使用64位的浮点数储存的，故而请注意1和1.0是全等的
1 === 1.0 // true

// js浮点数由64个二进制位组成
// 第一位：符号位，0正数，1负数
// 第2位到第12位（共11位）：指数部分（即指数部分在0到2047之间）
// 第13位到第64位（共52位）：小数部分（即有效数字）
// 精度最多只能到53个二进制位，这意味着，绝对值小于2的53次方的整数
// 小数进行算术运算时，实质上就是把十进制的浮点数转化为二进制，这样的结果是无穷的，JS最多有2的53次方有效数字，并不是精准的，所以再进行运算时会失准
// 为了避免产生精度差异:
// (1) toFixed()方法，先进行四舍五入取有效的小数位数:仍然会存在不精准
// (2) 把需要计算的数字乘以 10 的 n 次幂，换算成计算机能够精确识别的整数，然后再除以 10 的 n 次幂
// (3) 第三方库 bignumber.js
### 响应式

### 源码分析

* 源码流程 
new Vue() => initMixin => initState =》initData => observe(data) => new Observer(data)

* 核心（一）：Observer构造函数

```js
export class Observer {
  // ...
  constructor (value: any) {
    if (Array.isArray(value)) {
      // 处理数组的响应式
      if (hasProto) {
        // 如果有原型，则修改数组的原型（__proto__）
        // 在原型基础上重写数组的方法，比如push、pop、shift、unshift等，使得数组的操作也能触发响应式（调用ob.dep.notify()），同时对数组的变更数据调用observe转换成响应式
        protoAugment(value, arrayMethods)
      } else {
        copyAugment(value, arrayMethods, arrayKeys)
      }
      // 遍历数组值，换成响应式
      this.observeArray(value)
    } else {
      // 遍历对象值，转换成响应式
      this.walk(value)
    }
  }
  // ...
}
```

关于get：收集依赖和set：触发响应式事件的核心代码在defineReactive
在构造函数Observer中的observeArray或者walk，最后都会通过执行defineReactive对数据进行监听，并且调用ob.dep.notify()

```js
export function defineReactive {
  // ...
  const dep = new Dep() // 可以理解为发布订阅模式中的事件中心，连接事件目标（数据）和订阅者的中介者
  Object.defineProperty(obj, key, {
    get: function reactiveGetter () {
      const value = getter ? getter.call(obj) : val
      if (Dep.target) {
        // 收集依赖
        dep.depend()
        ...
      }
      return value
    },
    set: function reactiveSetter (newVal) {
      // ...
      // 通知订阅者，执行依赖的事件分发，触发响应式
      dep.notify()
    }
  })
}
  // ...
}
```

* 核心（二）：Dep构造函数

  * 每一个对象属性最终调用defineReactive
  * 每一次调用defineReactive，都会创建一个Dep实例，并且将Dep实例挂载到对象属性上
  * 收集依赖调用链条：
    * dep.depend() => Dep.target.addDep(dep)
    * Dep.target是什么（是一个订阅对象Watcher），怎么来的？
      * Dep.target是一个全局变量，用来存储当前正在触发的Watcher实例，在Watcher实例中会调用addDep方法，将Dep实例挂载到Watcher实例上
      * 实例化Watcher时，执行pushTarget(this)，执行Dep.target = this（将当前wather指向Dep.target）
    * 执行链路：Dep.target.addDep(dep) => Watcher.addDep() => dep.addSub(wather)

```js
export default class Dep {
  static target: ?Watcher;
  id: number;
  subs: Array<Watcher>;

  constructor () {
    this.id = uid++
    this.subs = []
  }

  addSub (sub: Watcher) {
    this.subs.push(sub)
  }

  removeSub (sub: Watcher) {
    remove(this.subs, sub)
  }

  depend () {
    if (Dep.target) {
      Dep.target.addDep(this)
    }
  }

  notify () {
    // stabilize the subscriber list first
    const subs = this.subs.slice()
    if (process.env.NODE_ENV !== 'production' && !config.async) {
      // subs aren't sorted in scheduler if not running async
      // we need to sort them now to make sure they fire in correct
      // order
      subs.sort((a, b) => a.id - b.id)
    }
    for (let i = 0, l = subs.length; i < l; i++) {
      subs[i].update()
    }
  }
}

// The current target watcher being evaluated.
// This is globally unique because only one watcher
// can be evaluated at a time.
Dep.target = null
const targetStack = []

export function pushTarget (target: ?Watcher) {
  targetStack.push(target)
  Dep.target = target
}

export function popTarget () {
  targetStack.pop()
  Dep.target = targetStack[targetStack.length - 1]
}

```

* 核心（三）：Watcher构造函数

  * Watcher有三种类型：
    * 用户自定义computed：计算属性
    * 用户自定义watch：监听属性
    * 渲染watcher，负责更新视图，一个vue实例(组件)对应一个渲染watcher

  * 当数据更新时 会调用对应dep对象的notify方法，通知所有的watcher更新视图，即执行watcher的update方法：dep.notify() => 所有的watcher.update() => queueWatcher(watcher)将watcher添加到执行队列,如果同一个watcher被多次触发，只会被推入到队列中一次 => nextTick(flushSchedulerQueue)

  * nextTick是通过Promise的微任务实现的，所有的watcher都会在下一个事件循环中依次执行

  
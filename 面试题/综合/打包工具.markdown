### 打包工具

#### webpack
* hash
chunkhash根据不同的入口文件(Entry)进行依赖文件解析、构建对应的chunk，生成对应的hash值
contenthash表示由文件内容产生的hash值

* loader
webpack 只能直接处理 javascript 格式的代码。任何非 js 文件都必须被预先处理转换为 js 代码，才可以参与打包。loader（加载器）就是这样一个代码转换器。它由 webpack 的 `loader runner` 执行调用，接收原始资源数据作为参数（当多个加载器联合使用时，上一个loader的结果会传入下一个loader），最终输出 javascript 代码（和可选的 source map）给 webpack 做进一步编译。

* plugins
Compiler：Webpack 工作流程中最高层的对象，初始化配置，提供 Webpack 流程的全局钩子，比如 done、compilation 这类；
Compilation 模块会被 Compiler 用来创建新的 compilation 对象（或新的 build 对象）。 compilation 实例能够访问所有的模块和它们的依赖（大部分是循环依赖）

ProvidePlugin
HtmlWebpackPlugin
CopyWebpackPlugin




#### webpack5

* node版本 >= 10.13.0

* 功能清除
  * 以前某个模块依赖nodejs里面的核心模块，那么这个模块的引入会把Node整个polyfill引入（如果是浏览器环境需要这个polyfill
  ）
  * require.includes废弃

* 长期缓存
  * chunkId,modulesId以前按照顺序数字，现在按照确定数字
  增加确定性的 moduleId 和 chunkId 的生成策略。moduleId 根据上下文模块路径，chunkId 根据 chunk 内容计算

* 持久化缓存
  * 原生支持缓存，默认缓存在内存里，可以通过配置对cache进行设置
  * 缓存淘汰策略，文件缓存node_modules/.cache/webpack里

* 构建优化
  * Tree Shaking优化，支持嵌套的Tree Shaking，通过算法可判断是否执行代码进行更优的构建

* 支持生成ES6代码

* 模块联邦
  使一个JS应用在运行过程中可以动态加载另一个应用的代码，不再需要本地安装Npm包

#### vite

* bundless冷启动时间大大缩短（使用ESBuild,Golang语言打包）
* HMR速度不受整个项目体积影响
* 单文件粒度的缓存更优
* 不需要sourcemap调试